{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/gRPC/",
    "result": {"data":{"site":{"siteMetadata":{"title":"El Rincon Del MaQuinarias"}},"markdownRemark":{"id":"0abb9f24-ef76-5470-9079-0fd4fab28096","excerpt":"Tabla de contenidos Que es gRPC Que tipos hay Como Funciona Porque gRPC Generación de código Java Para cualquier lenguaje (Windows) Diferencias REST vs gRPC…","html":"<h1>Tabla de contenidos</h1>\n<ul>\n<li><a href=\"#que-es-grpc\">Que es gRPC</a></li>\n<li><a href=\"#que-tipos-hay\">Que tipos hay</a></li>\n<li><a href=\"#como-funciona\">Como Funciona</a></li>\n<li><a href=\"#porque-grpc\">Porque gRPC</a></li>\n<li><a href=\"#generaci-n-de-c-digo\">Generación de código</a>\n<ul>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#para-cualquier-lenguaje--windows-\">Para cualquier lenguaje (Windows)</a></li>\n</ul>\n</li>\n<li><a href=\"#diferencias-rest-vs-grpc\">Diferencias REST vs gRPC</a></li>\n<li><a href=\"#documentaci-n-oficial\">Documentación oficial</a></li>\n</ul>\n<h1>Que es gRPC</h1>\n<p>Es un protocolo por el cual se permite ejecutar un procedimiento de otro programa alojado en otro sistema</p>\n<p>La mejor parte de gRPC es que los desarrolladores no tienen que codificar explicitamente los detalles de la interacción, este código se autogenera con el propio framework</p>\n<p>De tal manera que si por ejemplo tenemos una aplicación Golang y una Java a traves de este protocolo podrían llamarse entre si</p>\n<p>Uno actúa de servidor y otro de cliente (Luego veremos las diferentes formas que hay)</p>\n<h1>Que tipos hay</h1>\n<ol>\n<li>\n<p>Unaria – Cliente manda 1 mensaje y el servidor responde con otro mensaje</p>\n</li>\n<li>\n<p>Streaming del lado de cliente – El cliente manda n mensajes y espera que el servidor mande 1 sola respuesta</p>\n</li>\n<li>\n<p>streaming del lado del servidor – El cliente manda 1 mensaje y espera que el servidor mande N mensajes</p>\n</li>\n<li>\n<p>bi-direccional – el cliente y el servidor se mandan multiples mensajes en paralelo y un orden arbitrario, este tipo es flexible y no bloqueante que se refiere a que ninguna de las 2 partes necesita esperar para mandar informacion a la otra</p>\n</li>\n</ol>\n<h1>Como Funciona</h1>\n<p>El cliente tiene un “stub” que provee el mismo método o función que tiene el servidor , este “stub” es autogenerado por el framework a traves de un compilador externo o en el caso de java a traves de un plugin que definimo en el pom</p>\n<p>Este “stub” llamara a gRPC por detrás para intercambiar información con el servidor por la red</p>\n<p>Gracias al “stub” el cliente y el servidor solo se tienen que preocupar de implementar su logica de negocio</p>\n<h1>Porque gRPC</h1>\n<p>Es una manera de comunicar diferentes lenguajes de programación que hoy en día existen en una aplicación productiva, por ejemplo podrías tener java o golang como backend y Javascript como frontend</p>\n<p>Para la comunicación entre ellos debe haber algo para hacerlo de manera sencilla y rápida, eso es gRPC</p>\n<p>Es necesario cumplir una serie de reglas para esa comunicación:</p>\n<ul>\n<li>the communication channel</li>\n<li>authentication</li>\n<li>payload format</li>\n<li>data model</li>\n<li>error handling</li>\n</ul>\n<h1>Generación de código</h1>\n<p>Esta es la característica mas importante ya que genera el código necesario para la comunicación enter cliente y servidor</p>\n<p>Lo primero que tendremos que hacer es crear el contrato en un archivo .proto que en el caso de java alojaremos en <code class=\"language-text\">src/main/proto/</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Aqui definimos la sintaxis que usará nuestro archivo, es conveniente usar la versión 3 de este\r\n// Ya que aglutina mas lenguajes de programación compatibles \r\nsyntax = \"proto3\";\r\n\r\n// Con esto indicamos que cada clase que se cree se haga en un fichero independiente\r\noption java_multiple_files = true;\r\n\r\n// Aqui indicaremos el paquete que tienen todos las clases de este archivo\r\npackage com.github.maquina1995.grpc.model;\r\n\r\n// Aqui definimos un pojo que albergará la información de una Persona\r\nmessage Person {\r\n\t// Aqui definimos los atributos indicando la posición de los mismos\r\n\tstring first_name = 1;\r\n\tstring last_name = 2;\r\n}\r\n\r\n// Lo mismo que lo de antes pero aqui solo tenemos 1 atributo\r\nmessage Greeting {\r\n\tstring message = 1;\r\n}\r\n\r\n// Aquí definimos un servicio que usa nuestros pojos \r\nservice HelloWorldService {\r\n  rpc sayHello (Person) returns (Greeting);\r\n}</code></pre></div>\n<h2>Java</h2>\n<p>Para poder generar los objetos asociados necesitamos:</p>\n<ol>\n<li>Tener un plugin de maven</li>\n<li>Ejecutar un <code class=\"language-text\">mvn clean compile</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;plugin>\r\n\t&lt;groupId>org.xolstice.maven.plugins&lt;/groupId>\r\n\t&lt;artifactId>protobuf-maven-plugin&lt;/artifactId>\r\n\t&lt;version>${protobuf-maven-plugin.version}&lt;/version>\r\n\t&lt;configuration>\r\n\t&lt;protocArtifact>com.google.protobuf:protoc:3.5.1-1:exe:${os.detected.classifier}&lt;/protocArtifact>\r\n\t&lt;pluginId>grpc-java&lt;/pluginId>\r\n\t&lt;pluginArtifact>io.grpc:protoc-gen-grpc-java:1.16.1:exe:${os.detected.classifier}&lt;/pluginArtifact>\r\n\t&lt;/configuration>\r\n\t&lt;executions>\r\n\t\t&lt;execution>\r\n\t\t\t&lt;goals>\r\n\t\t\t\t&lt;goal>compile&lt;/goal>\r\n\t\t\t\t&lt;goal>compile-custom&lt;/goal>\r\n\t\t\t&lt;/goals>\r\n\t\t&lt;/execution>\r\n\t&lt;/executions>\r\n&lt;/plugin></code></pre></div>\n<p>Al hacer el <code class=\"language-text\">mvn clean compile</code> podremos ver en la siguiente ruta: <code class=\"language-text\">target\\generated-sources\\protobuf\\java</code> los archivos generados</p>\n<h2>Para cualquier lenguaje (Windows)</h2>\n<p>Según la respuesta de Yuvaraj en: <a href=\"https://stackoverflow.com/questions/13616033/install-protocol-buffers-on-windows\">https://stackoverflow.com/questions/13616033/install-protocol-buffers-on-windows</a></p>\n<p>Solo tienes que descargar: <a href=\"https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-win64.zip\">https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-win64.zip</a></p>\n<ul>\n<li>Una vez que la tengas debes descomprimirla en una ruta</li>\n<li>Esa ruta la tienes que meter como PROTOC_HOME en las variables de entorno</li>\n<li>A continuación añadiremos %PROTOC_HOME%\\bin a la variable path</li>\n<li>Abriremos una nueva terminal (no vale las que tengamos abiertas ya que has modificado las variables de entorno)</li>\n<li>Para finalizar comprobaremos la correcta instalación y configuración con el comando: <code class=\"language-text\">protoc</code></li>\n</ul>\n<h1>Diferencias REST vs gRPC</h1>\n<p>En el rest la comunicación solo se puede hacer en un sentido <code class=\"language-text\">cliente -> servidor</code> mientras que en gRPC en todos los sentidos.</p>\n<p>Rest está ampliamente soportado por los navegadores mientras que gRPC está limitado.</p>\n<h1>Documentación oficial</h1>\n<ol>\n<li>Java: <a href=\"https://grpc.io/docs/languages/java/basics/\">Documentacion gRPC Java</a></li>\n<li>Golang: <a href=\"https://grpc.io/docs/languages/go/basics/\">Documentacion gRPC Golang</a></li>\n</ol>","frontmatter":{"title":"Guía gRPC","date":"December 05, 2021","description":"Guía gRPC."}},"previous":{"fields":{"slug":"/Golang_Desde_Cero/"},"frontmatter":{"title":"Golang Desde Cero"}},"next":{"fields":{"slug":"/Indice_Github/"},"frontmatter":{"title":"Indice Github"}}},"pageContext":{"id":"0abb9f24-ef76-5470-9079-0fd4fab28096","previousPostId":"b3b735c5-9831-5dc1-aa4b-aa028fa56f48","nextPostId":"102659b3-020d-5b9b-a93d-8a338f295bcb"}},
    "staticQueryHashes": ["2841359383","3274528899"]}